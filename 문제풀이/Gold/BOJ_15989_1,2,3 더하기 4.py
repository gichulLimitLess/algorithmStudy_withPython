# 1,2,3 더하기 4
'''
    [★DP 잘 푸는 법★]
    1. 상태 정의를 먼저 명확히 말로 적어라.
        ex) dp[i] = i를 1,2,3으로 표현하는 방법의 수
        -> dp[i] = i번째 전깃줄을 포함하는 최대 증가 부분 수열의 길이
        이렇게 구체적으로 "dp가 의미하는 것"을 문장으로 안 쓰면, 절대 점화식이 안 보임
    2. 점화식은 수학적 추론보다 '마지막 선택'을 기준으로 본다
        ex) 마지막에 1을 붙였다 / 마지막에 2를 붙였다 / 마지막에 3을 붙였다
        LIS -> "i번째 원소를 마지막으로 선택했다면, 그 전 원소 j는 i보다 작아야 한다"
        대부분의 점화식은 "마지막 행동"에서 거꾸로 올라감
    3. 초기 조건은 이상해도 받아들여라
        dp[0] = 1 같은 건 수학적 해석보단 "점화식을 성립시키기 위한 장치"임
        억지로 "왜 0이 1가지냐?" 따지다 막히지 말고, 점화식이 성립하도록 base case를 맞추는 게 목적임
    4. DP는 발명하는 게 아니라, 기존 패턴을 매핑하는 것
        전형적인 dp 유형이 정해져 있음:
            - 구간 DP (펠린드롬, 행렬 곱 최적화)
            - 배낭 문제 (물건 선택)
            - LIS/가장 긴 경로
            - 경우의 수 세기 (코인, 계단 오르기)
        문제를 봤을 때, "이건 LIS랑 닮았다", "이건 배낭형이다"하고 매핑하는 훈련이 필요
'''